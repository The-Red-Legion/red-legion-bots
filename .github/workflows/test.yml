name: Test
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: write

jobs:
  # Clear previous test labels before starting new test run
  clear-labels:
    name: "Clear Previous Test Labels"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Remove all previous test labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            if (!pull_number) {
              console.log('Not a pull request, skipping label clearing');
              return;
            }

            // List of all possible test-related and deployment labels to remove
            // Using exact case-sensitive label names from GitHub
            const testLabels = [
              'tests pending',
              'tests failed', 
              'Tests Good',           // Note: Capital letters as shown in GitHub
              'tests good',           // Also try lowercase version
              'Ready To Deploy',      // New deployment readiness label
              'database tests failed',
              'bot tests failed', 
              'linting failed',
              'validation failed',
              'performance issues',
              'ready for review',
              'Ready to Merge',       // Capital letters as shown in GitHub
              'needs fixes',
              'Deploy',               // Capital D as shown in GitHub
              'Merge'                 // Capital M as shown in GitHub
            ];
            
            console.log('🧹 Clearing previous test and deployment labels...');
            
            for (const label of testLabels) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pull_number,
                  name: label
                });
                console.log(`✅ Removed label: ${label}`);
              } catch (error) {
                console.log(`ℹ️ Label "${label}" not found or already removed`);
              }
            }
            
            // Add 'tests pending' label to indicate tests are starting
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: ['tests pending']
            });
            
            console.log('✅ Added "tests pending" label - test run starting');

  code-quality:
    name: "Code Quality & Validation"
    runs-on: ubuntu-latest
    needs: clear-labels
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary pytest-asyncio
      - name: Run linting
        continue-on-error: true
        run: |
          echo "🔍 Running linting checks..."
          if python3 -m ruff check src/ --line-length 120; then
            echo "✅ Linting passed - no issues found"
          else
            echo "⚠️ Linting found issues - continuing with tests"
            echo "💡 Please review and fix linting issues when possible"
          fi
      - name: Run validation tests
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "✅ Running validation tests..."
          python3 -m pytest tests/test_validation.py -v
          echo "✅ Validation tests completed!"

  database-tests:
    name: "Database Tests"
    runs-on: ubuntu-latest
    needs: [clear-labels, code-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary pytest-asyncio
      - name: Test Database Architecture v2.0.0
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🗄️ Testing Database Architecture v2.0.0..."
          python3 -m pytest tests/test_database_v2.py -v
          echo "✅ Database v2.0.0 tests completed!"

  bot-functionality:
    name: "Bot Functionality Tests" 
    runs-on: ubuntu-latest
    needs: [clear-labels, code-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary pytest-asyncio
      - name: Test Red Legion Bot Main
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🤖 Testing Red Legion Bot Main..."
          python3 -m pytest tests/test_main.py -v
          echo "✅ Bot main tests completed!"
      - name: Test Command Sync
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🔄 Testing Command Sync System..."
          python3 -m pytest tests/test_command_sync.py -v
          echo "✅ Command sync tests completed!"

  api-tests:
    name: "API & Integration Tests"
    runs-on: ubuntu-latest
    needs: [database-tests, bot-functionality]
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary pytest-asyncio

  test-summary:
    name: "Test Summary & Results"
    runs-on: ubuntu-latest
    needs: [clear-labels, code-quality, database-tests, bot-functionality, api-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Generate Test Summary
        run: |
          echo "📊 **Test Suite Results Summary**" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY  
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality & Validation | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Tests | ${{ needs.database-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bot Functionality Tests | ${{ needs.bot-functionality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API & Integration Tests | ${{ needs.api-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Overall result
          if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.database-tests.result }}" = "success" ] && [ "${{ needs.bot-functionality.result }}" = "success" ] && [ "${{ needs.api-tests.result }}" = "success" ]; then
            echo "## 🎉 All tests passed! Ready for deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Some tests failed - review results above" >> $GITHUB_STEP_SUMMARY
          fi

  # Post-test actions for label management
  post-tests:
    name: "Post-Test Actions"
    runs-on: ubuntu-latest
    needs: [clear-labels, code-quality, database-tests, bot-functionality, api-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update PR labels based on test results
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            if (!pull_number) {
              console.log('Not a pull request, skipping label updates');
              return;
            }

            // Check test results
            const codeQuality = '${{ needs.code-quality.result }}';
            const databaseTests = '${{ needs.database-tests.result }}';
            const botFunctionality = '${{ needs.bot-functionality.result }}';
            const apiTests = '${{ needs.api-tests.result }}';
            
            const allTestsPassed = codeQuality === 'success' && 
                                 databaseTests === 'success' && 
                                 botFunctionality === 'success' && 
                                 apiTests === 'success';
            
            // Remove all existing test-related labels first
            const labelsToRemove = ['tests pending', 'Tests Good', 'Ready To Deploy', 'Deploy', 'Ready to Merge'];
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pull_number,
                  name: label
                });
                console.log(`✅ Removed "${label}" label`);
              } catch (error) {
                console.log(`ℹ️ "${label}" label not found`);
              }
            }
            
            // Add appropriate final label based on results
            if (allTestsPassed) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['Tests Good', 'Ready To Deploy']
              });
              
              // Add comment with success summary
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: '## ✅ All Tests Passed!\n\n' +
                      '| Test Suite | Result |\n' +
                      '|------------|--------|\n' +
                      '| Code Quality & Validation | ✅ Passed |\n' +
                      '| Database Tests | ✅ Passed |\n' +
                      '| Bot Functionality | ✅ Passed |\n' +
                      '| API & Integration Tests | ✅ Passed |\n\n' +
                      '🚀 **Ready for deployment!** This PR has been automatically labeled as \'Ready To Deploy\'.'
              });
            } else {
              // Don't add any success labels for failed tests
              // The absence of 'Tests Good' indicates tests need attention
              
              // Add comment with failure details
              const failedTests = [];
              if (codeQuality !== 'success') failedTests.push('Code Quality & Validation');
              if (databaseTests !== 'success') failedTests.push('Database Tests');
              if (botFunctionality !== 'success') failedTests.push('Bot Functionality');
              if (apiTests !== 'success') failedTests.push('API & Integration Tests');
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: '## ❌ Some Tests Failed\n\n' +
                      '| Test Suite | Result |\n' +
                      '|------------|--------|\n' +
                      '| Code Quality & Validation | ' + (codeQuality === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n' +
                      '| Database Tests | ' + (databaseTests === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n' +
                      '| Bot Functionality | ' + (botFunctionality === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n' +
                      '| API & Integration Tests | ' + (apiTests === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n\n' +
                      '**Failed test suites:** ' + failedTests.join(', ') + '\n\n' +
                      'Please review the test results and fix any issues before proceeding.'
              });
            }

  # Auto-deploy job (only runs if tests pass AND auto-deploy label is present)
  auto-deploy:
    name: "Auto Deploy (if labeled)"
    runs-on: ubuntu-latest
    needs: [clear-labels, code-quality, database-tests, bot-functionality, api-tests, test-summary]
    if: always() && needs.test-summary.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for auto-deploy label
        id: check-label
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            if (!pull_number) {
              console.log('Not a pull request, skipping auto-deploy check');
              return 'false';
            }
            
            try {
              const labels = await github.rest.issues.listLabelsOnIssue({
                owner,
                repo,
                issue_number: pull_number,
              });
              
              const hasAutoDeployLabel = labels.data.some(label => 
                label.name.toLowerCase().includes('auto-deploy') || 
                label.name.toLowerCase().includes('auto deploy')
              );
              
              console.log('PR Labels:', labels.data.map(l => l.name));
              console.log('Has auto-deploy label:', hasAutoDeployLabel);
              
              return hasAutoDeployLabel ? 'true' : 'false';
            } catch (error) {
              console.error('Error checking labels:', error);
              return 'false';
            }
      
      - name: Trigger deployment
        if: steps.check-label.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            const sha = context.payload.pull_request?.head.sha;
            
            console.log('🚀 Auto-deploy triggered!');
            console.log('PR:', pull_number);
            console.log('SHA:', sha);
            
            // Dispatch deployment workflow
            await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: 'deploy.yml',
              ref: context.payload.pull_request.head.ref,
              inputs: {
                reason: `Auto-deploy from PR #${pull_number} - All tests passed`,
                branch: context.payload.pull_request.head.ref
              }
            });
            
            // Add comment about auto-deployment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `## 🚀 Auto-Deploy Triggered!

✅ All tests passed and auto-deploy label detected
🎯 Deploying branch \`${context.payload.pull_request.head.ref}\` to production

**Note:** This deploys without merging - the PR remains open for review.`
            });
      
      - name: Skip deployment (no label)
        if: steps.check-label.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            console.log('ℹ️ Auto-deploy skipped - no auto-deploy label found');
            
            // Add informational comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `## 💡 Auto-Deploy Available

✅ All tests passed! Your PR is ready for deployment.

**To auto-deploy without merging:**
1. Add the \`auto-deploy\` label to this PR
2. The deployment will trigger automatically

**Manual deployment:** Use the deployment workflow in Actions tab`
            });
