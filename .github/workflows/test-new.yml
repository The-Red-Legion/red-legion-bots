name: Test
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  code-quality:
    name: "Code Quality & Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary
      - name: Run linting
        continue-on-error: true
        run: |
          echo "🔍 Running linting checks..."
          if python3 -m ruff check src/ --line-length 120; then
            echo "✅ Linting passed - no issues found"
          else
            echo "⚠️ Linting found issues - continuing with tests"
            echo "💡 Please review and fix linting issues when possible"
          fi
      - name: Run validation tests
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "✅ Running validation tests..."
          python3 -m pytest tests/test_validation.py -v
          echo "✅ Validation tests completed!"

  database-architecture:
    name: "Database Architecture Tests"
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary
      - name: Test Database v2.0.0 Architecture
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🗄️ Testing Database Architecture v2.0.0..."
          python3 -m pytest tests/test_database_v2.py -v
          echo "✅ Database v2.0.0 tests completed!"
      - name: Test Database Integration
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🔗 Testing Database Integration..."
          python3 -m pytest tests/test_database_integration.py -v
          echo "✅ Database integration tests completed!"
      - name: Test Database Performance
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "⚡ Testing Database Performance..."
          python3 -m pytest tests/test_database_performance.py -v
          echo "✅ Database performance tests completed!"

  bot-functionality:
    name: "Bot Functionality Tests" 
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary
      - name: Test Participation Bot
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🤖 Testing Participation Bot..."
          python3 -m pytest tests/test_participation_bot.py -v
          echo "✅ Participation bot tests completed!"
      - name: Test Modular System
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🧩 Testing Modular System Architecture..."
          python3 -m pytest tests/test_modular_system.py -v
          echo "✅ Modular system tests completed!"

  advanced-system:
    name: "Advanced System Tests"
    runs-on: ubuntu-latest
    needs: [database-architecture, bot-functionality]
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt ruff pytest pytest-mock psycopg2-binary
      - name: Test Advanced System Components
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🚀 Testing Advanced System Components..."
          python3 -m pytest tests/test_advanced_system.py -v
          echo "✅ Advanced system tests completed!"

  test-summary:
    name: "Test Summary & Results"
    runs-on: ubuntu-latest
    needs: [code-quality, database-architecture, bot-functionality, advanced-system]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Generate Test Summary
        run: |
          echo "📊 **Test Suite Results Summary**" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY  
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality & Validation | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Architecture Tests | ${{ needs.database-architecture.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bot Functionality Tests | ${{ needs.bot-functionality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Advanced System Tests | ${{ needs.advanced-system.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Overall result
          if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.database-architecture.result }}" = "success" ] && [ "${{ needs.bot-functionality.result }}" = "success" ] && [ "${{ needs.advanced-system.result }}" = "success" ]; then
            echo "## 🎉 All tests passed! Ready for deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Some tests failed - review results above" >> $GITHUB_STEP_SUMMARY
          fi

  # Post-test actions for label management
  post-tests:
    name: "Post-Test Actions"
    runs-on: ubuntu-latest
    needs: [code-quality, database-architecture, bot-functionality, advanced-system]
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update PR labels based on test results
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            if (!pull_number) {
              console.log('Not a pull request, skipping label updates');
              return;
            }

            // Check test results
            const codeQuality = '${{ needs.code-quality.result }}';
            const dbArchitecture = '${{ needs.database-architecture.result }}';
            const botFunctionality = '${{ needs.bot-functionality.result }}';
            const advancedSystem = '${{ needs.advanced-system.result }}';
            
            const allTestsPassed = codeQuality === 'success' && 
                                 dbArchitecture === 'success' && 
                                 botFunctionality === 'success' && 
                                 advancedSystem === 'success';
            
            // Remove old test labels
            const labelsToRemove = ['tests pending', 'tests failed'];
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pull_number,
                  name: label
                });
              } catch (error) {
                console.log(`Label "${label}" not found, skipping removal`);
              }
            }
            
            // Add appropriate label based on results
            if (allTestsPassed) {
              await github.rest.issues.addLabelsToIssue({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['tests good']
              });
              
              // Add comment with success summary
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: "## ✅ All Tests Passed!\\n\\n| Test Suite | Result |\\n|------------|--------|\\n| Code Quality & Validation | ✅ Passed |\\n| Database Architecture v2.0.0 | ✅ Passed |\\n| Bot Functionality | ✅ Passed |\\n| Advanced System Components | ✅ Passed |\\n\\n🚀 **Ready for deployment!** Add the `deploy` label when ready to deploy to staging."
              });
            } else {
              await github.rest.issues.addLabelsToIssue({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['tests failed']
              });
              
              // Add comment with failure details
              const failedTests = [];
              if (codeQuality !== 'success') failedTests.push('Code Quality & Validation');
              if (dbArchitecture !== 'success') failedTests.push('Database Architecture');
              if (botFunctionality !== 'success') failedTests.push('Bot Functionality');
              if (advancedSystem !== 'success') failedTests.push('Advanced System');
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: "## ❌ Some Tests Failed\\n\\n| Test Suite | Result |\\n|------------|--------|\\n| Code Quality & Validation | " + (codeQuality === 'success' ? '✅ Passed' : '❌ Failed') + " |\\n| Database Architecture v2.0.0 | " + (dbArchitecture === 'success' ? '✅ Passed' : '❌ Failed') + " |\\n| Bot Functionality | " + (botFunctionality === 'success' ? '✅ Passed' : '❌ Failed') + " |\\n| Advanced System Components | " + (advancedSystem === 'success' ? '✅ Passed' : '❌ Failed') + " |\\n\\n**Failed test suites:** " + failedTests.join(', ') + "\\n\\nPlease review the test results and fix any issues before proceeding."
              });
            }
