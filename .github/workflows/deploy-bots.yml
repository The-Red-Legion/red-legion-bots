name: Deploy Bots
on:
  pull_request:
    branches: [main]
    types: [labeled]  # Trigger on label application

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  checks: read

jobs:
  deploy-participation-bot:
    runs-on: self-hosted
    if: contains(github.event.pull_request.labels.*.name, 'Ok to Deploy')  # Moved to job level
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Deploy to Compute Instance
        run: |
          echo "=== Starting deployment to compute instance ==="
          
          # Create comprehensive deployment script with error handling
          cat << 'EOF' > /tmp/deploy_script.sh
          #!/bin/bash
          set -e  # Exit on any error
          
          echo "=== Starting deployment on compute instance ==="
          
          # Stop existing bot
          if [ -f /app/bot.pid ]; then
            echo "Stopping existing bot process..."
            kill -9 $(cat /app/bot.pid) 2>/dev/null || echo "No process to kill"
            rm -f /app/bot.pid
          fi
          
          # Clean and clone
          echo "Cleaning and cloning repository..."
          sudo rm -rf /app || echo "Warning: /app removal failed"
          sudo git clone https://github.com/The-Red-Legion/red-legion-bots /app || { echo "ERROR: Git clone failed"; exit 1; }
          sudo chown -R $(whoami):$(whoami) /app || { echo "ERROR: Failed to change ownership"; exit 1; }
          
          # Install dependencies
          echo "Installing dependencies..."
          cd /app/src || { echo "ERROR: Failed to change to /app/src"; exit 1; }
          python3 -m ensurepip --upgrade 2>&1 || { echo "ERROR: ensurepip failed"; exit 1; }
          python3 -m pip install --upgrade pip 2>&1 || { echo "ERROR: pip upgrade failed"; exit 1; }
          pip3 install -r ../requirements.txt psycopg2-binary 2>&1 || { echo "ERROR: Pip install failed"; exit 1; }
          
          # Set environment variables
          echo "Setting environment variables..."
          echo "DISCORD_TOKEN=$(gcloud secrets versions access latest --secret=discord-token --project=rl-prod-471116)" > .env || { echo "ERROR: Failed to create .env file"; exit 1; }
          echo "TEXT_CHANNEL_ID=$(gcloud secrets versions access latest --secret=text-channel-id --project=rl-prod-471116)" >> .env || { echo "ERROR: Failed to append to .env"; exit 1; }
          echo "DATABASE_URL=${DATABASE_URL}" >> .env || { echo "ERROR: Failed to set DATABASE_URL"; exit 1; }
          
          # Start bot
          echo "Starting bot..."
          nohup python3 participation_bot.py > /app/bot.log 2>&1 & echo $! > /app/bot.pid || { echo "ERROR: Failed to start bot"; exit 1; }
          
          # Verify bot started
          sleep 5
          if [ -f /app/bot.pid ] && kill -0 $(cat /app/bot.pid) 2>/dev/null; then
            echo "SUCCESS: Bot started with PID $(cat /app/bot.pid)"
            echo "=== Deployment completed successfully ==="
            exit 0
          else
            echo "ERROR: Bot failed to start or died immediately"
            if [ -f /app/bot.log ]; then
              echo "=== Bot log contents ==="
              cat /app/bot.log
            fi
            exit 1
          fi
          EOF
          
          # Make script executable
          chmod +x /tmp/deploy_script.sh
          
          # Execute deployment script and capture all output
          echo "=== Executing deployment script ==="
          /tmp/deploy_script.sh 2>&1 || { 
            echo "=== DEPLOYMENT FAILED ==="
            echo "Exit code: $?"
            if [ -f /app/bot.log ]; then
              echo "=== Bot log contents ==="
              cat /app/bot.log
            fi
            exit 1
          }
          
          echo "=== Deployment completed successfully ==="
        shell: bash
      - name: Verify Bot Health
        run: |
          echo "=== Checking bot health ==="
          
          # Check if bot process is running
          if [ -f /app/bot.pid ] && kill -0 $(cat /app/bot.pid) 2>/dev/null; then
            echo "✅ Bot process is running (PID: $(cat /app/bot.pid))"
          else
            echo "❌ Bot process is not running"
            if [ -f /app/bot.log ]; then
              echo "=== Bot log contents ==="
              tail -20 /app/bot.log
            fi
            exit 1
          fi
          
          # Check bot log for any immediate errors
          if [ -f /app/bot.log ]; then
            echo "=== Recent bot log entries ==="
            tail -10 /app/bot.log
            
            # Check for common error patterns
            if grep -q "ERROR\|Exception\|Failed" /app/bot.log; then
              echo "⚠️  Warning: Found error messages in bot log"
              grep -A 2 -B 2 "ERROR\|Exception\|Failed" /app/bot.log
            else
              echo "✅ No obvious errors found in recent logs"
            fi
          else
            echo "⚠️  Warning: No bot log file found"
          fi
          
          echo "=== Bot health check completed ==="
        shell: bash
      - name: Capture Deployment Logs
        if: always()
        run: |
          echo "=== Final deployment status ==="
          
          # Show bot status
          if [ -f /app/bot.pid ]; then
            if kill -0 $(cat /app/bot.pid) 2>/dev/null; then
              echo "✅ Bot is running (PID: $(cat /app/bot.pid))"
            else
              echo "❌ Bot process exists but is not running"
            fi
          else
            echo "❌ No bot PID file found"
          fi
          
          # Show recent logs
          if [ -f /app/bot.log ]; then
            echo "=== Last 20 lines of bot log ==="
            tail -20 /app/bot.log
          else
            echo "❌ No bot log file found"
          fi
          
          # Check system resources
          echo "=== System resource check ==="
          df -h /app || echo "Could not check disk space"
          free -h || echo "Could not check memory"
          
          echo "=== Deployment log capture completed ==="
        shell: bash
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

  post-deployment:
    if: always()  # Run regardless of deploy job success/failure
    needs: deploy-participation-bot
    runs-on: ubuntu-latest
    steps:
      - name: Check Deployment Result
        run: |
          if [ "${{ needs.deploy-participation-bot.result }}" == "success" ]; then
            echo "✅ Deployment job completed successfully"
          else
            echo "❌ Deployment job failed"
            echo "Check the deployment logs above for detailed error information"
          fi
      - name: Merge and Close PR on Success
        if: needs.deploy-participation-bot.result == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get PR details for merge
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              
              // Merge the pull request
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                commit_title: `Deploy: ${pr.data.title}`,
                commit_message: `Deployment successful for PR #${context.payload.pull_request.number}\n\n${pr.data.body || 'No description provided'}`,
                merge_method: 'squash'
              });
              console.log('✅ Pull request merged successfully');
            } catch (error) {
              console.error('❌ Failed to merge pull request:', error.message);
              throw error;
            }
      - name: Add Bug Label and Remove Ok to Deploy on Failure
        if: needs.deploy-participation-bot.result == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Add bug label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['bug']
              });
              console.log('✅ Bug label added successfully');
              
              // Remove "Ok to Deploy" label
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  name: 'Ok to Deploy'
                });
                console.log('✅ Ok to Deploy label removed successfully');
              } catch (error) {
                if (error.status === 404) {
                  console.log('ℹ️  Ok to Deploy label not found, nothing to remove');
                } else {
                  console.error('❌ Failed to remove Ok to Deploy label:', error.message);
                }
              }
              
              // Add a comment with deployment failure information
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '❌ **Deployment Failed**\n\nThe bot deployment to the compute instance failed. Check the deployment logs above for detailed error information including:\n- Python dependency installation errors\n- Database connection issues\n- Bot startup failures\n- System resource problems\n\nPlease review the logs and fix any issues before attempting to deploy again.'
              });
              
            } catch (error) {
              console.error('❌ Failed to update labels:', error.message);
              // Don't throw error here to avoid failing the workflow
              // since this is just cleanup
            }