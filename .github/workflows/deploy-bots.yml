name: Deploy Bots
on:
  pull_request:
    branches: [main]
    types: [labeled]  # Trigger on label application
jobs:
  deploy-participation-bot:
    runs-on: self-hosted
    if: contains(github.event.pull_request.labels.*.name, 'Ok to Deploy')  # Moved to job level
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Create Deployment Script
        run: |
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e
          EOF
        shell: bash
      - name: Stop Running Bot Instance
        run: |
          if [ -f /app/bot.pid ]; then
            kill -9 $(cat /app/bot.pid) 2>/dev/null || true
            rm -f /app/bot.pid
          fi
          echo "Bot instance stopped or no PID found"
        shell: bash
      - name: Clean and Clone Repo
        run: |
          sudo rm -rf /app || echo "Warning: /app removal failed, may not exist"
          sudo git clone https://github.com/The-Red-Legion/red-legion-bots /app || { echo "Git clone failed"; exit 1; }
          sudo chown -R $(whoami):$(whoami) /app || { echo "Failed to change ownership"; exit 1; }
          echo "Repo cloned to /app and ownership changed"
        shell: bash
      - name: Install Dependencies
        run: |
          cd /app/src || { echo "Failed to change to /app/src"; exit 1; }
          python3 -m ensurepip --upgrade
          python3 -m pip install --upgrade pip
          pip3 install -r ../requirements.txt psycopg2-binary || { echo "Pip install failed"; exit 1; }
          echo "Dependencies installed"
        shell: bash
      - name: Set Environment Variables
        run: |
          cd /app/src || { echo "Failed to change to /app/src"; exit 1; }
          echo "DISCORD_TOKEN=$(gcloud secrets versions access latest --secret=discord-token --project=rl-prod-471116)" > .env
          echo "TEXT_CHANNEL_ID=$(gcloud secrets versions access latest --secret=text-channel-id --project=rl-prod-471116)" >> .env
          echo "DATABASE_URL=${DATABASE_URL}" >> .env
          export $(cat .env)
          echo "Environment variables set"
        shell: bash
      - name: Start Bot
        run: |
          cd /app/src || { echo "Failed to change to /app/src"; exit 1; }
          nohup python3 participation_bot.py > /app/bot.log 2>&1 & echo $! > /app/bot.pid
          echo "Bot deployed, PID: $(cat /app/bot.pid)"
        shell: bash
      - name: Make Script Executable and Run
        run: |
          chmod +x deploy.sh
          ./deploy.sh
        shell: bash
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

  post-deployment:
    if: always()  # Run regardless of deploy job success/failure
    needs: deploy-participation-bot
    runs-on: ubuntu-latest
    steps:
      - name: Close PR on Success
        if: needs.deploy-participation-bot.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              state: 'closed'
            });
      - name: Add Bug Label and Remove Ok to Deploy on Failure
        if: needs.deploy-participation-bot.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['bug']
            });
            github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              name: 'Ok to Deploy'
            });