name: Deploy Bots
on:
  pull_request:
    branches: [main]
    types: [labeled]  # Trigger on label application

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  checks: read

jobs:
  deploy-participation-bot:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'Ok to Deploy')  # Moved to job level
    steps:
      - uses: actions/checkout@v4
      - name: Set up SSH key for Ansible
        run: |
          mkdir -p ~/.ssh
          
          # Handle potential base64 encoding and clean the key
          KEY_CONTENT="${{ secrets.BOT_SSH_PRIVATE_KEY }}"
          if echo "$KEY_CONTENT" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "$KEY_CONTENT" | tr -d '\r' > ~/.ssh/id_rsa
          else
            echo "$KEY_CONTENT" | base64 -d | tr -d '\r' > ~/.ssh/id_rsa 2>/dev/null || echo "$KEY_CONTENT" | tr -d '\r' > ~/.ssh/id_rsa
          fi
          
          chmod 600 ~/.ssh/id_rsa
          
          # Validate the key format
          if ! ssh-keygen -l -f ~/.ssh/id_rsa >/dev/null 2>&1; then
            echo "SSH key validation failed. Trying to fix format..."
            # Try to convert to proper format
            ssh-keygen -i -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.tmp 2>/dev/null && mv ~/.ssh/id_rsa.tmp ~/.ssh/id_rsa
          fi
          
          # Generate public key from private key
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/dev/null || echo "Failed to generate public key"
          
          ssh-keyscan -H ${{ secrets.BOT_SERVER_HOST }} >> ~/.ssh/known_hosts
          
          # Test SSH connection with verbose output
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ secrets.BOT_SERVER_HOST }} "echo 'SSH connection test successful'" 2>&1 || echo "SSH test failed, but continuing..."
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Set up SSH key for Ansible
        run: |
          # SSH setup not needed for local deployment
          echo "Using local connection for deployment"

      - name: Deploy to Compute Instance with Ansible
        run: |
          echo "=== Starting Ansible deployment ==="

          # Set environment variables for Ansible
          export DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          export TEXT_CHANNEL_ID=${{ secrets.TEXT_CHANNEL_ID }}
          export DATABASE_URL=${{ secrets.DATABASE_URL }}

          # Run Ansible playbook
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }} \
          TEXT_CHANNEL_ID=${{ secrets.TEXT_CHANNEL_ID }} \
          DATABASE_URL=${{ secrets.DATABASE_URL }} \
          ansible-playbook ansible/deploy.yml -i ansible/inventory.ini -v

          echo "=== Ansible deployment completed ==="
        shell: bash
      - name: Verify Bot Health
        run: |
          echo "=== Checking bot health on remote host ==="
          
          # SSH into the remote host and check bot status
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.BOT_SERVER_HOST }} << 'EOF'
            # Check if bot process is running
            if [ -f /app/bot.pid ] && kill -0 $(cat /app/bot.pid) 2>/dev/null; then
              echo "✅ Bot process is running (PID: $(cat /app/bot.pid))"
            else
              echo "❌ Bot process is not running"
              if [ -f /app/bot.log ]; then
                echo "=== Bot log contents ==="
                tail -20 /app/bot.log
              fi
              exit 1
            fi
            
            # Check bot log for any immediate errors
            if [ -f /app/bot.log ]; then
              echo "=== Recent bot log entries ==="
              tail -10 /app/bot.log
              
              # Check for common error patterns
              if grep -iq "ERROR\|Exception\|Failed" /app/bot.log; then
                echo "⚠️  Warning: Found error messages in bot log"
                grep -i -A 2 -B 2 "ERROR\|Exception\|Failed" /app/bot.log
              else
                echo "✅ No obvious errors found in recent logs"
              fi
            else
              echo "⚠️  Warning: No bot log file found"
            fi
            
            echo "=== Bot health check completed ==="
          EOF
        shell: bash
      - name: Capture Deployment Logs
        if: always()
        run: |
          echo "=== Final deployment status ==="
          
          # SSH into remote host to check deployment status
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.BOT_SERVER_HOST }} << 'EOF'
            # Show bot status
            if [ -f /app/bot.pid ]; then
              if kill -0 $(cat /app/bot.pid) 2>/dev/null; then
                echo "✅ Bot is running (PID: $(cat /app/bot.pid))"
              else
                echo "❌ Bot process exists but is not running"
              fi
            else
              echo "❌ No bot PID file found"
            fi
            
            # Show recent logs
            if [ -f /app/bot.log ]; then
              echo "=== Last 20 lines of bot log ==="
              tail -20 /app/bot.log
            else
              echo "❌ No bot log file found"
            fi
            
            # Check system resources
            echo "=== System resource check ==="
            df -h /app || echo "Could not check disk space"
            free -h || echo "Could not check memory"
            
            echo "=== Deployment log capture completed ==="
          EOF
        shell: bash
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

  post-deployment:
    if: always()  # Run regardless of deploy job success/failure
    needs: deploy-participation-bot
    runs-on: ubuntu-latest
    steps:
      - name: Check Deployment Result
        run: |
          if [ "${{ needs.deploy-participation-bot.result }}" == "success" ]; then
            echo "✅ Deployment job completed successfully"
          else
            echo "❌ Deployment job failed"
            echo "Check the deployment logs above for detailed error information"
          fi
      - name: Merge and Close PR on Success
        if: needs.deploy-participation-bot.result == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get PR details for merge
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              
              // Merge the pull request
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                commit_title: `Deploy: ${pr.data.title}`,
                commit_message: `Deployment successful for PR #${context.payload.pull_request.number}\n\n${pr.data.body || 'No description provided'}`,
                merge_method: 'squash'
              });
              console.log('✅ Pull request merged successfully');
            } catch (error) {
              console.error('❌ Failed to merge pull request:', error.message);
              throw error;
            }
      - name: Add Bug Label and Remove Ok to Deploy on Failure
        if: needs.deploy-participation-bot.result == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Add bug label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['bug']
              });
              console.log('✅ Bug label added successfully');
              
              // Remove "Ok to Deploy" label
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  name: 'Ok to Deploy'
                });
                console.log('✅ Ok to Deploy label removed successfully');
              } catch (error) {
                if (error.status === 404) {
                  console.log('ℹ️  Ok to Deploy label not found, nothing to remove');
                } else {
                  console.error('❌ Failed to remove Ok to Deploy label:', error.message);
                }
              }
              
              // Add a comment with deployment failure information
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '❌ **Deployment Failed**\n\nThe bot deployment to the compute instance failed. Check the deployment logs above for detailed error information including:\n- Python dependency installation errors\n- Database connection issues\n- Bot startup failures\n- System resource problems\n\nPlease review the logs and fix any issues before attempting to deploy again.'
              });
              
            } catch (error) {
              console.error('❌ Failed to update labels:', error.message);
              // Don't throw error here to avoid failing the workflow
              // since this is just cleanup
            }