name: Quick Tests

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]
  push:
    branches: [main]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Clear previous quick test labels
  clear-labels:
    name: "Clear Previous Labels"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Remove previous quick test labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            if (!pull_number) {
              console.log('Not a pull request, skipping label clearing');
              return;
            }

            // Quick test specific labels to remove
            const quickTestLabels = [
              'quick tests pending',
              'quick tests passed', 
              'quick tests failed',
              'needs fixes'
            ];
            
            console.log('🧹 Clearing previous quick test labels...');
            
            for (const label of quickTestLabels) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pull_number,
                  name: label
                });
                console.log(`✅ Removed label: ${label}`);
              } catch (error) {
                console.log(`ℹ️ Label "${label}" not found or already removed`);
              }
            }
            
            // Add 'quick tests pending' label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: ['quick tests pending']
            });
            
            console.log('✅ Added "quick tests pending" label');

  # Fast validation and linting
  quick-validation:
    name: "Quick Code Validation"
    runs-on: ubuntu-latest
    needs: [clear-labels]
    if: always() && (needs.clear-labels.result == 'success' || needs.clear-labels.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install minimal dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ruff pytest psycopg2-binary
      - name: Run linting (fast)
        run: |
          echo "🔍 Running quick linting checks..."
          python3 -m ruff check src/ --line-length 120 --select E,F,W
          echo "✅ Quick linting completed!"
      - name: Run syntax validation
        run: |
          echo "🔍 Running Python syntax validation..."
          python3 -m py_compile src/**/*.py || echo "⚠️ Some files have syntax issues"
          echo "✅ Syntax validation completed!"

  # Essential functionality tests (fastest subset)
  core-functionality:
    name: "Core Functionality Tests"  
    runs-on: ubuntu-latest
    needs: [quick-validation]
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set GCP Project
        run: echo "GOOGLE_CLOUD_PROJECT=rl-prod-471116" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: false
      - name: Install core dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt pytest pytest-mock psycopg2-binary aiohttp
      - name: Run essential validation tests
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "⚡ Running essential validation tests..."
          python3 -m pytest tests/test_validation.py -v --tb=short
          echo "✅ Essential tests completed!"
      - name: Run Sunday Mining offline tests (quick)
        env:
          PYTHONPATH: .
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TEXT_CHANNEL_ID: ${{ secrets.TEXT_CHANNEL_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_CLOUD_PROJECT: rl-prod-471116
        run: |
          echo "🧪 Running Sunday Mining quick validation..."
          timeout 120 python3 test_sunday_mining_offline.py || echo "⚠️ Sunday Mining tests timed out or failed"
          echo "✅ Sunday Mining quick tests completed!"

  # Results and labeling
  quick-test-results:
    name: "Quick Test Results"
    runs-on: ubuntu-latest
    needs: [clear-labels, quick-validation, core-functionality]
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update PR labels based on quick test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number;
            
            if (!pull_number) {
              console.log('Not a pull request, skipping label updates');
              return;
            }

            // Check quick test results
            const validation = '${{ needs.quick-validation.result }}';
            const coreFunc = '${{ needs.core-functionality.result }}';
            
            const quickTestsPassed = validation === 'success' && coreFunc === 'success';
            
            // Remove pending label
            try {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: pull_number,
                name: 'quick tests pending'
              });
            } catch (error) {
              console.log('No pending label to remove');
            }
            
            if (quickTestsPassed) {
              // Add success labels
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['quick tests passed']
              });
              
              // Add success comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: "## ⚡ Quick Tests Passed!\\n\\n| Test Suite | Result |\\n|------------|--------|\\n| Code Validation | ✅ Passed |\\n| Core Functionality | ✅ Passed |\\n\\n🚀 **Ready for comprehensive testing!** Use the `run comprehensive tests` label to trigger full validation before deployment."
              });
              
            } else {
              // Add failure labels  
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['quick tests failed', 'needs fixes']
              });
              
              // Add failure comment
              const failedTests = [];
              if (validation !== 'success') failedTests.push('Code Validation');
              if (coreFunc !== 'success') failedTests.push('Core Functionality');
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: "## ❌ Quick Tests Failed\\n\\n| Test Suite | Result |\\n|------------|--------|\\n| Code Validation | " + (validation === 'success' ? '✅ Passed' : '❌ Failed') + " |\\n| Core Functionality | " + (coreFunc === 'success' ? '✅ Passed' : '❌ Failed') + " |\\n\\n**Failed test suites:** " + failedTests.join(', ') + "\\n\\n⚠️ Please fix these issues before proceeding. Quick tests must pass before comprehensive testing."
              });
            }

      - name: Generate Step Summary
        run: |
          echo "⚡ **Quick Test Results Summary**" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY  
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Validation | ${{ needs.quick-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Core Functionality | ${{ needs.core-functionality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quick-validation.result }}" = "success" ] && [ "${{ needs.core-functionality.result }}" = "success" ]; then
            echo "## ⚡ Quick tests passed! Ready for comprehensive testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Quick tests failed - fix issues before comprehensive testing" >> $GITHUB_STEP_SUMMARY
          fi