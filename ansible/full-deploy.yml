---
- name: Full Deploy Participation Bot (Complete Codebase Copy)
  hosts: arccorp_compute
  become: yes
  gather_facts: yes

  vars:
    app_dir: /app
    backup_dir: /app_backup
    repo_url: https://github.com/The-Red-Legion/red-legion-bots.git
    python_version: "3.9"
    gcp_project: "rl-prod-471116"

  tasks:
    - name: Display deployment info
      debug:
        msg: |
          ===== FULL CODEBASE DEPLOYMENT =====
          Deployment Type: Complete file copy (no rsync)
          Target Directory: {{ app_dir }}
          Backup Directory: {{ backup_dir }}
          Time: {{ ansible_date_time.iso8601 }}
          =====================================

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == 'Debian'

    - name: Install required system packages
      apt:
        name:
          - python3
          - python3-dev
          - git
          - build-essential
          - curl
          - wget
          - software-properties-common
          - tar
          - gzip
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install PostgreSQL client packages
      block:
        - name: Try installing postgresql-client
          apt:
            name:
              - postgresql-client
              - libpq-dev
            state: present
          ignore_errors: yes
          register: pg_client_install
        
        - name: Try alternative PostgreSQL client package names
          apt:
            name:
              - postgresql-client-14
              - libpq-dev
            state: present
          when: pg_client_install.failed | default(false)
          ignore_errors: yes
          register: pg_client_alt_install
        
        - name: Install minimal PostgreSQL development files if others failed
          apt:
            name:
              - libpq-dev
            state: present
          when: 
            - pg_client_install.failed | default(false)
            - pg_client_alt_install.failed | default(false)
      when: ansible_os_family == 'Debian'

    - name: Ensure pip is installed (Ubuntu 22.04 method)
      block:
        - name: Install pip using ensurepip (built into Python 3.4+)
          command: python3 -m ensurepip --upgrade
          become: yes
          register: ensurepip_result
          ignore_errors: yes
        
        - name: Install pip via apt if ensurepip failed
          apt:
            name: python3-pip
            state: present
          when: ensurepip_result.failed | default(false)
          ignore_errors: yes
          register: apt_pip_result
        
        - name: Final fallback - install pip manually
          block:
            - name: Download get-pip.py
              get_url:
                url: https://bootstrap.pypa.io/get-pip.py
                dest: /tmp/get-pip.py
                mode: '0755'
            
            - name: Install pip using get-pip.py
              command: python3 /tmp/get-pip.py
              become: yes
            
            - name: Clean up get-pip.py
              file:
                path: /tmp/get-pip.py
                state: absent
          when: 
            - ensurepip_result.failed | default(false)
            - apt_pip_result.failed | default(false)
      when: ansible_os_family == 'Debian'

    - name: Stop existing bot process
      include_tasks: tasks/stop_bot.yml

    - name: Stop bot service before full deployment
      systemd:
        name: red-legion-bot
        state: stopped
      ignore_errors: yes

    - name: Create backup of existing application (if exists)
      block:
        - name: Check if app directory exists
          stat:
            path: "{{ app_dir }}"
          register: app_dir_stat
        
        - name: Remove old backup directory
          file:
            path: "{{ backup_dir }}"
            state: absent
          when: app_dir_stat.stat.exists
        
        - name: Create backup of current app
          command: cp -r "{{ app_dir }}" "{{ backup_dir }}"
          when: app_dir_stat.stat.exists
        
        - name: Display backup info
          debug:
            msg: "✅ Backup created at {{ backup_dir }}"
          when: app_dir_stat.stat.exists
        
        - name: No backup needed
          debug:
            msg: "ℹ️ No existing app directory to backup"
          when: not app_dir_stat.stat.exists

    - name: Completely remove existing application directory
      file:
        path: "{{ app_dir }}"
        state: absent

    - name: Create fresh application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create temporary directory for full codebase copy
      tempfile:
        state: directory
        suffix: _full_deploy
      register: temp_dir
      delegate_to: localhost

    - name: Copy entire codebase to temporary directory (excluding unwanted files)
      synchronize:
        src: "{{ playbook_dir }}/../"
        dest: "{{ temp_dir.path }}/"
        recursive: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.github"
          - "--exclude=__pycache__"
          - "--exclude=.pytest_cache"
          - "--exclude=.DS_Store"
          - "--exclude=node_modules"
          - "--exclude=venv"
          - "--exclude=.env"
          - "--exclude=Logs"
          - "--exclude=*.pyc"
          - "--exclude=*.pyo"
          - "--exclude={{ backup_dir }}"
      delegate_to: localhost

    - name: Create tarball of complete codebase
      command: tar -czf "{{ temp_dir.path }}.tar.gz" -C "{{ temp_dir.path }}" .
      delegate_to: localhost

    - name: Copy tarball to remote server
      copy:
        src: "{{ temp_dir.path }}.tar.gz"
        dest: "/tmp/full_codebase.tar.gz"
        mode: '0644'

    - name: Extract complete codebase to application directory
      unarchive:
        src: "/tmp/full_codebase.tar.gz"
        dest: "{{ app_dir }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        extra_opts:
          - "--strip-components=1"

    - name: Clean up temporary files
      block:
        - name: Remove temporary tarball from remote
          file:
            path: "/tmp/full_codebase.tar.gz"
            state: absent
        
        - name: Remove temporary directory on localhost
          file:
            path: "{{ temp_dir.path }}"
            state: absent
          delegate_to: localhost
        
        - name: Remove temporary tarball on localhost
          file:
            path: "{{ temp_dir.path }}.tar.gz"
            state: absent
          delegate_to: localhost

    - name: Verify complete codebase deployment
      block:
        - name: Check if src directory exists
          stat:
            path: "{{ app_dir }}/src"
          register: src_dir_check
          
        - name: Check if main.py exists
          stat:
            path: "{{ app_dir }}/src/main.py"
          register: main_file_check
          
        - name: List deployed files for debugging
          find:
            paths: "{{ app_dir }}"
            recurse: yes
            file_type: file
          register: deployed_files
          
        - name: Show deployment structure
          debug:
            msg: |
              Deployment verification:
              - App directory exists: {{ src_dir_check.stat.exists | default(false) }}
              - Main.py exists: {{ main_file_check.stat.exists | default(false) }}
              - Total files deployed: {{ deployed_files.matched }}
              
        - name: Fail if main.py not found
          fail:
            msg: |
              Deployment verification failed:
              - src/ directory: {{ 'EXISTS' if src_dir_check.stat.exists else 'MISSING' }}
              - src/main.py: {{ 'EXISTS' if main_file_check.stat.exists else 'MISSING' }}
              - Files deployed: {{ deployed_files.matched }}
          when: not main_file_check.stat.exists

    - name: Display full deployment stats
      debug:
        msg: |
          ===== FULL DEPLOYMENT COMPLETED =====
          Method: Complete file copy (not rsync)
          Files deployed: {{ deployed_files.matched }}
          Deployment time: {{ ansible_date_time.iso8601 }}
          Target: {{ app_dir }}
          Backup: {{ backup_dir }} (if existed)
          =====================================

    - name: Install Python dependencies (fresh installation)
      block:
        - name: Install requirements with pip3 (system-wide)
          pip:
            requirements: "{{ app_dir }}/requirements.txt"
            executable: pip3
            state: forcereinstall  # Force reinstall to ensure clean state
      rescue:
        - name: Install requirements with python3 -m pip (system-wide)
          command: python3 -m pip install --force-reinstall -r "{{ app_dir }}/requirements.txt"

    - name: Install additional packages (fresh installation)
      block:
        - name: Install psycopg2-binary with pip3 (system-wide)
          pip:
            name:
              - psycopg2-binary
            executable: pip3
            state: forcereinstall  # Force reinstall for clean state
      rescue:
        - name: Install psycopg2-binary with python3 -m pip (system-wide)
          command: python3 -m pip install --force-reinstall psycopg2-binary

    - name: Set up environment variables
      include_tasks: tasks/setup_environment.yml

    - name: Remove any cached .env files that might cause conflicts
      file:
        path: "{{ app_dir }}/.env"
        state: absent
      ignore_errors: true

    - name: Clear Python cache directories
      find:
        paths: "{{ app_dir }}"
        patterns: "__pycache__"
        file_type: directory
        recurse: yes
      register: pycache_dirs

    - name: Remove Python cache directories
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ pycache_dirs.files }}"
      when: pycache_dirs.files is defined

    - name: Test Python imports (fresh environment)
      command: python3 -c "import sys; print('Python path:', sys.path); import src.participation_bot"
      args:
        chdir: "{{ app_dir }}"
      environment:
        PYTHONPATH: "{{ app_dir }}:$PYTHONPATH"
      register: import_test
      failed_when: import_test.rc != 0
      when: not ansible_check_mode

    - name: Start bot service (fresh start)
      include_tasks: tasks/start_bot.yml

    - name: Extended bot verification (allow more time for fresh start)
      block:
        - name: Wait for bot to fully initialize
          pause:
            seconds: 20
            prompt: "Waiting for bot to fully initialize after fresh deployment..."
        
        - name: Verify bot is running
          include_tasks: tasks/verify_bot.yml
        
        - name: Display success message
          debug:
            msg: |
              ✅ FULL DEPLOYMENT SUCCESS ✅
              The complete codebase has been deployed using file copy method.
              All files have been refreshed and the bot should be fully operational.
              Backup available at: {{ backup_dir }}

    - name: Cleanup old backup on success
      file:
        path: "{{ backup_dir }}"
        state: absent
      when: 
        - import_test.rc == 0
        - not ansible_check_mode
      ignore_errors: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart red-legion-bot
      systemd:
        name: red-legion-bot
        state: restarted
        enabled: yes