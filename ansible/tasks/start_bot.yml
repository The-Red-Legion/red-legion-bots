---
- name: Run configuration validation
  command: python3 scripts/validate_config.py
  args:
    chdir: "{{ app_dir }}"
  register: config_validation
  when: not ansible_check_mode
  ignore_errors: true

- name: Show configuration validation result
  debug:
    msg: "Configuration validation: {{ 'PASSED' if config_validation.rc == 0 else 'FAILED' }} - {{ config_validation.stdout if config_validation.rc == 0 else config_validation.stderr }}"
  when: not ansible_check_mode and config_validation is defined

- name: Test Python imports before starting bot
  command: python3 -c "import sys; sys.path.insert(0, 'src'); from config.settings import get_database_url; print('Import successful, DB URL configured:', bool(get_database_url()))"
  args:
    chdir: "{{ app_dir }}"
  environment:
    PYTHONPATH: "{{ app_dir }}:$PYTHONPATH"
  register: import_test
  when: not ansible_check_mode
  ignore_errors: true

- name: Show import test result
  debug:
    msg: "Import test result: {{ import_test.stdout if import_test.rc == 0 else import_test.stderr }}"
  when: not ansible_check_mode and import_test is defined

- name: Create environment file from template
  template:
    src: env.j2
    dest: "{{ app_dir }}/.env"
    mode: '0600'
  when: not ansible_check_mode

- name: Create systemd service file
  copy:
    content: |
      [Unit]
      Description=Red Legion Discord Bot
      After=network.target
      Wants=network-online.target
      After=network-online.target

      [Service]
      Type=simple
      User=root
      WorkingDirectory={{ app_dir }}
      ExecStart=/usr/bin/python3 src/main.py
      Restart=always
      RestartSec=10
      StandardOutput=journal
      StandardError=journal
      Environment=PYTHONUNBUFFERED=1
      Environment=GOOGLE_CLOUD_PROJECT=rl-prod-471116
      EnvironmentFile={{ app_dir }}/.env

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/red-legion-bot.service
    mode: '0644'
  notify: reload systemd

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Enable and start systemd service
  systemd:
    name: red-legion-bot
    enabled: yes
    state: started
  register: start_result
  when: not ansible_check_mode and (import_test is undefined or import_test.rc == 0) and (config_validation is undefined or config_validation.rc == 0)

- name: Show startup debug info
  debug:
    msg: "Systemd service started: {{ start_result.status is defined }}"
  when: not ansible_check_mode and start_result is defined

- name: Wait for bot to start
  pause:
    seconds: 3
  when: not ansible_check_mode

- name: Verify bot service is running
  systemd:
    name: red-legion-bot
  register: service_status
  when: not ansible_check_mode

- name: Show service status
  debug:
    msg: "Service status: {{ service_status.status.ActiveState if service_status.status is defined else 'Unknown' }}"
  when: not ansible_check_mode and service_status is defined

- name: Check service logs if failed
  shell: journalctl -u red-legion-bot -n 20 --no-pager
  register: service_logs
  when: not ansible_check_mode and service_status is defined and service_status.status.ActiveState != 'active'
  failed_when: false

- name: Fail with service logs if service not active
  fail:
    msg: "Bot service failed to start. Logs: {{ service_logs.stdout }}"
  when: not ansible_check_mode and service_status is defined and service_status.status.ActiveState != 'active'
