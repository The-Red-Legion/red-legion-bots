---
- name: Check if bot PID file exists
  stat:
    path: "{{ app_dir }}/bot.pid"
  register: pid_file_check
  when: not ansible_check_mode

- name: Verify bot process is running
  shell: kill -0 $(cat {{ app_dir }}/bot.pid)
  when: pid_file_check is defined and pid_file_check.stat is defined and pid_file_check.stat.exists and not ansible_check_mode
  register: process_check
  failed_when: process_check.rc != 0

- name: Check bot log for errors
  command: tail -20 {{ app_dir }}/bot.log
  register: log_check
  when: pid_file_check is defined and pid_file_check.stat is defined and pid_file_check.stat.exists and not ansible_check_mode

- name: Display recent log entries
  debug:
    msg: "{{ log_check.stdout }}"
  when: pid_file_check is defined and pid_file_check.stat is defined and pid_file_check.stat.exists and not ansible_check_mode

- name: Check for error patterns in log
  shell: grep -i "ERROR\|Exception\|Failed" {{ app_dir }}/bot.log
  register: error_check
  failed_when: error_check.rc == 0
  ignore_errors: true
  when: pid_file_check is defined and pid_file_check.stat is defined and pid_file_check.stat.exists and not ansible_check_mode

- name: Read PID from file
  slurp:
    src: "{{ app_dir }}/bot.pid"
  register: pid_content
  when: pid_file_check is defined and pid_file_check.stat is defined and pid_file_check.stat.exists and not ansible_check_mode

- name: Report successful deployment
  debug:
    msg: "âœ… Bot deployment successful! PID: {{ (pid_content.content | b64decode).strip() }}"
  when: pid_file_check is defined and pid_file_check.stat is defined and pid_file_check.stat.exists and process_check is defined and (process_check.rc | default(0)) == 0 and pid_content is defined and not ansible_check_mode

- name: Remove PID file
  file:
    path: "{{ app_dir }}/bot.pid"
    state: absent
  when: not ansible_check_mode
  ignore_errors: true
